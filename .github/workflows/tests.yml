name: tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main


jobs:
  test-build-arm:
    name: Run tests (ARM64 Linux)
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Use GCC 14
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
        if: matrix.compiler == 'gcc'

      - name: Use Clang
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        if: matrix.compiler == 'clang'

      - name: Configure
        run: cmake -B build -DARGON_ENABLE_TESTING=YES

      - name: Run build
        run: cmake --build build

      - name: Run CTest
        run: ctest --output-on-failure --test-dir build/test/specs

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results (ARM64 ${{ matrix.compiler }})
          path: |
            build/test/specs/results/*.xml
            build/test/specs/results/**/*.xml

  test-build-qemu:
    name: Run tests (ARMv7/QEMU)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cpu: [A9, M55]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: 'latest'
        if: matrix.cpu == 'M55'

      - name: Set Environment Variables for Arm GNU Toolchain
        run: |
          echo "CC=arm-none-eabi-gcc" >> $GITHUB_ENV
          echo "CXX=arm-none-eabi-g++" >> $GITHUB_ENV
        if: matrix.cpu == 'M55'

      - name: Install cross-compilation toolchain and QEMU
        run: |
          sudo debconf-communicate <<< "set man-db/auto-update false"
          sudo dpkg-reconfigure man-db
          sudo apt-get update
          sudo apt-get install -y qemu-user binfmt-support qemu-user-static qemu-system-arm

      - name: Install GCC for ARMv7
        run: |
          sudo apt-get install -y gcc-14-arm-linux-gnueabihf g++-14-arm-linux-gnueabihf
          echo "CC=arm-linux-gnueabihf-gcc-14" >> $GITHUB_ENV
          echo "CXX=arm-linux-gnueabihf-g++-14" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/arm-linux-gnueabihf/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          sudo ln -s /usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 /lib/ld-linux-armhf.so.3
        if: matrix.cpu == 'A9'

      - name: Configure
        run: cmake -B build -G Ninja -DARGON_ENABLE_TESTING=YES -DARGON_TEST_CPU=${{ matrix.cpu }}

      - name: Run build
        run: cmake --build build --verbose

      - name: Run CTest
        run: sudo ctest --output-on-failure --test-dir build/test/specs

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results (Cortex-${{ matrix.cpu }} QEMU)
          path: |
            build/test/specs/results/*.xml
            build/test/specs/results/**/*.xml

  test-build-x86_64-linux:
    name: Run tests (x86_64 Linux)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Use GCC 14
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
        if: matrix.compiler == 'gcc'

      - name: Use Clang
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        if: matrix.compiler == 'clang'

      - name: Configure
        run: cmake -B build -DARGON_ENABLE_TESTING=YES

      - name: Run build
        run: cmake --build build

      - name: Run CTest
        run: ctest --output-on-failure --test-dir build/test/specs

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results (x86 Linux ${{ matrix.compiler }})
          path: |
            build/test/specs/results/*.xml
            build/test/specs/results/**/*.xml


  test-build-macos:
    name: Run tests (macOS)
    strategy:
      fail-fast: false
      matrix:
        os: [macos-15, macos-13]
        compiler: [gcc]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Use GCC 14
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
        if: matrix.compiler == 'gcc'

      - name: Install Clang/LLVM 20
        run: |
          brew update
          brew install llvm@20
          brew link --force llvm@20
        if: matrix.compiler == 'clang'

      - name: Use Clang
        run: |
          echo "CC=$(brew --prefix llvm@20)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@20)/bin/clang" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix llvm@20)/lib -L$(brew --prefix llvm@20)/lib/c++ -L$(brew --prefix llvm@20)/lib/unwind -lunwind" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix llvm@20)/include -I$(brew --prefix llvm@20)/include/c++ -I$(brew --prefix llvm@20)/include/c++/v1" >> $GITHUB_ENV
        if: matrix.compiler == 'clang'

      - name: Configure
        run: cmake -B build -DARGON_ENABLE_TESTING=YES

      - name: Run build
        run: cmake --build build

      - name: Run CTest
        run: ctest --output-on-failure --test-dir build/test/specs

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results (${{ matrix.os }} ${{ matrix.compiler }})
          path: |
            build/test/specs/results/*.xml
            build/test/specs/results/**/*.xml


  test-build-x86_64-windows:
    name: Run tests (x86_64 Windows)
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, msvc]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Configure ClangCL
        run: cmake -G "Visual Studio 17 2022" -A x64 -T ClangCL -B build -DARGON_ENABLE_TESTING=YES
        if: matrix.compiler == 'clang'

      - name: Configure MSVC
        run: cmake -G "Visual Studio 17 2022" -A x64 -B build -DARGON_ENABLE_TESTING=YES
        if: matrix.compiler == 'msvc'

      - name: Run build
        run: cmake --build build --config Release

      - name: Run CTest
        run: ctest --output-on-failure --test-dir build/test/specs -C Release

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results (x86 Windows ${{ matrix.compiler }})
          path: |
            build/test/specs/results/*.xml
            build/test/specs/results/**/*.xml

  publish-test-results:
    name: "Publish Tests Results"
    needs:
      - test-build-arm
      - test-build-qemu
      - test-build-x86_64-linux
      - test-build-x86_64-windows
      - test-build-macos
    runs-on: ubuntu-latest
    permissions:
      checks: write

      # only needed unless run with comment_mode: off
      pull-requests: write

    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "artifacts/**/*.xml"
